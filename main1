import sqlite3
from fastapi import FastAPI, Request, requests
import uvicorn
app = FastAPI()

# Router
@app.get("/")
def root():
  return {"hey Hadile": "It works !"}
#--------------------------
#1 register customer
#--------------------------
@app.post("/register_customer")
async def register_customer(payload: Request):
    values_dict = await payload.json()
    # Open the DB
    database = sqlite3.connect('databaseproject.db', isolation_level=None)
    query_customer = database.execute('''
            INSERT INTO Customer (CustomerAccount, VAT, FullName, Country, RegistreNational, Password)
            VALUES ({customer}, {company}, {fullname}, {country}, {registrenational}, {password})
            '''.format(customer=(values_dict['CustomerAccount']) ,
                       company=(values_dict['VAT']),
                       fullname=values_dict['FullName'],
                       country=(values_dict['Country']),
                       registrenational=(values_dict['RegistreNational']),
                       password=(values_dict['Password'])))
    print (query_customer)
    # Close the DB
    database.close()
    return True
  #--------------------------------------------------------
  # 2 a company creates subscriptions in Subscriptions
  #---------------------------------------------------------
@app.post("/register_subscription")
async def register_subscription(payload: Request):
    values_dict = await payload.json()
    # Open the DB
    database = sqlite3.connect('databaseproject.db', isolation_level=None)
    query_subscription = database.execute('''
                         INSERT INTO Subscriptions (SubscriptionN, Price, VAT, SubscriptionInfo)
                         VALUES ({subscription}, {price}, {company}, {info})
                         '''.format(subscription=(values_dict['SubscriptionN']),
                             price=(values_dict['Price']),
                             company=(values_dict['VAT']),
                             info=(values_dict['SubscriptionInfo'])))
    print (query_subscription)
    # Close the DB
    database.close()
    return True
  #--------------------------------------------------------
  # 3 create a quote for each customer
  #---------------------------------------------------------
  # inputs: quoteid, subscription, registre national
@app.post("/register_quote")
async def register_quote(payload: Request):
    values_dict = await payload.json()
    # Open the DB
    database = sqlite3.connect('databaseproject.db', isolation_level=None)
    # Step 1: retrieve the subscription via VAT

    query_quote = database.execute(''' 
                  SELECT VAT FROM Subscriptions
                  WHERE SubscriptionN =  {}               
                  '''.format(values_dict['SubscriptionN']))  
    # where = je donne les subscitpionsN
    # We then store the results of the query with fetchall.
    quote_results = query_quote.fetchall()[0][0]
    print(quote_results)

    # thanks to the VAT that we get, we will retrieve the customer list that are in this company
    query_quote2 = database.execute(''' 
                  SELECT  RegistreNational FROM Customer
                  WHERE VAT = {}               
                  '''.format(str(quote_results)))  #the result will be all the customers that belong to the company that has the VAT stored previously ==> NOT A LIST!! BC NO FETCHALL 
    # We then store the results of the query with fetchall.
    quote_results2 = query_quote2.fetchall()
    # here, it becomes a list [(customerAccount,Fullname),();()...]
    print(quote_results2)
    
    query_price = database.execute('''
                                   SELECT Price FROM Subscriptions
                                   WHERE SubscriptionN ={}
                                   '''.format(values_dict['SubscriptionN']))
    price_results = query_price.fetchall()[0][0]
    print(price_results)
    
    pricevat = float(price_results)*1.21
    print(pricevat)
  # Jusqu'ici, we have succeeded to retrieve the VAT and all its customers based ONLYYYY on the subcriptionN
    for i in quote_results2: 
      print(i) 
      if str(i[0]) == str(values_dict['RegistreNational']): # valuedict = données que on va donner, cad ce qui sera mis dans le http 
        x =str(i[0])
        
        query_quote3 = database.execute('''
            INSERT INTO Quote (QuoteID, SubscriptionN, RegistreNational, Price, Accepted,Activated, PriceVAT) 
            VALUES ({quote}, {subscription}, {registrenational}, {price}, {accepted},{activated},{pricevat})             
            '''.format(quote=str(values_dict['QuoteID']),
                       subscription=str(values_dict['SubscriptionN']),
                       price=price_results,
                       accepted='FALSE',
                       activated='FALSE',
                       pricevat=pricevat,
                       registrenational=x))
        print('Quote Created')
        a = database.execute('''
                           SELECT * FROM  Quote
                           WHERE QuoteID = {}
                           '''.format(str(values_dict['QuoteID'])))
        a_results=a.fetchall()
        print(a_results)

      else: 
        print("Client does not exist for this VAT:"+ str(quote_results))
# valuedict = données que on va donner, cad ce qui sera mis dans le http
   
    # Close the DB
    database.close()
    return True
 #---------------------------------------
 #update Accepted in Quote
 #--------------------------------------
@app.post("/accept_quote")
async def accept_quote(payload: Request):
    values_dict = await payload.json()
    # Open the DB
    database = sqlite3.connect('databaseproject.db', isolation_level=None)
  
    secret_query = database.execute(''' 
                             SELECT Password FROM Customer
                             WHERE CustomerAccount = {}
                  '''.format(values_dict['CustomerAccount']))
  
    password = secret_query.fetchall()[0][0]
    print(password)
    if (password) == (values_dict['Password']):
      print('yess')
      accept_query = database.execute(''' 
                                       UPDATE Quote 
                                       SET Accepted = TRUE
                                       WHERE QuoteID = {quote}       
                                       '''.format(quote = str(values_dict['QuoteID'])))
       
      print('quote accepted')
      a = database.execute('''
                           SELECT * FROM  Quote
                           WHERE QuoteID = {}
                           '''.format(str(values_dict['QuoteID']))) 
      a_results=a.fetchall()
      print(a_results)
    else:
      print('quote not accepted')
      
   
    # Close the DB
    database.close()
    return True
 #---------------------------------------------------
 #activate the subscription in Subscription (update)
 #---------------------------------------------------
@app.post("/activate_subscription")
async def activate_Subscription(payload: Request):
    values_dict = await payload.json()
    # Open the DB
    database = sqlite3.connect('databaseproject.db', isolation_level=None)
    query_accepted=database.execute('''SELECT Accepted FROM Quote
                                       WHERE QuoteID= {}
                                    '''.format(values_dict['QuoteID'])) 
    accepted_results=query_accepted.fetchall()
    print(accepted_results)
    
    if int(accepted_results[0][0])==1 :
         query_activated=database.execute('''UPDATE Quote 
                                          SET Activated = TRUE
                                          WHERE QuoteID = {}     
                                          '''.format(values_dict['QuoteID']))
         print('subscription activated')
         b=database.execute('''
                            SELECT * FROM Quote
                            WHERE QuoteID = {}
                           '''.format(str(values_dict['QuoteID'])))
                            
         b_results=b.fetchall()
         print(b_results)
    else: 
      print('subscription can not be activated')    
       #Close the DB
    database.close()
    return True                  
#---------------------------------------------------------------------
# for an activated subscription, send invoice
#---------------------------------------------------------------------
@app.post("/send_invoice")
async def send_invoice(payload: Request):
    values_dict = await payload.json()
    # Open the DB
    database = sqlite3.connect('databaseproject.db', isolation_level=None)
#select tous les price d'un registre national qui sont activated dans quote
    query_price = database.execute('''
                                   SELECT Price, PriceVat FROM Quote
                                   WHERE RegistreNational = {registre}
                                   AND Activated = TRUE 
                                   '''.format(registre=values_dict['RegistreNational']))
    price_results=query_price.fetchall()
    print(price_results)
    
#calcule la somme de tous les price d'un registre national dont subscription est activated
    
    price_list = [x[0] for x in price_results]
    print(price_list)
    
    total_price = sum(price_list)
    print("Your total price ( Exluding VAT) is :" + " " + str(total_price))

    pricevat_list = [x[1] for x in price_results]
    print(pricevat_list)
    
    total_pricevat = sum(pricevat_list)
    print("Your total price ( Including VAT) is :" + " " + str(total_pricevat))
    
    
    query_invoice = database.execute('''
                                   INSERT INTO INVOICE (InvoiceID,Pending,Paid,TotalPriceVAT,RegistreNational)
                                   VALUES ({invoice}, {pending}, {paid}, {pricevat}, {RegistreNational})             
                                         '''.format(invoice=str(values_dict['InvoiceID']),
                                                    pending='TRUE',
                                                    paid='FALSE',
                                                    pricevat=total_pricevat,
                                                    RegistreNational = (values_dict['RegistreNational'])))
                                   
    b=database.execute('''
                            SELECT * FROM Invoice
                            WHERE InvoiceID = {}
                           '''.format(str(values_dict['InvoiceID'])))
                            
    b_results=b.fetchall()
    print(b_results)
   
    # Close the DB
    database.close()
    return True

#--------------------------------------------------
# check if the customer has a pending invoice
#----------------------------------------------------



app.post("/verify_pending")
async def Verify_Pending(payload: Request):
    values_dict = await payload.json()
    # Open the DB
    database = sqlite3.connect('databaseproject.db', isolation_level=None)
    query_accepted=database.execute('''SELECT Pending FROM Invoice
                                       WHERE RegistreNational = {}
                                    '''.format(values_dict['RegistreNational'])) 
    accepted_results=query_accepted.fetchall()[0]
    print(accepted_results)
    if accepted_results == 1:
        print(" You have a pending invoice, pleace proceed to payment")
    else:
        print("You don't have a pending invoice , congratulation !!)")

#---------------------------------------------------
# cutomer pays the invoice (update paid)
#----------------------------------------------------
@app.post("/verify_payment")
async def Verify_Payment(payload: Request):
    values_dict = await payload.json()
    # Open the DB
    database = sqlite3.connect('databaseproject.db', isolation_level=None)
    query_accepted=database.execute('''SELECT InvoiceID FROM Invoice''')
    accepted_results=query_accepted.fetchall()[0][0]
    
    print(accepted_results)
    #D'abord, je demande au customer de me rentrer son numéro de carte. Que je transforme en liste car je vais devoir loop over an iterable object (donc une liste), on peut pas loop over an integer.
    card=values_dict['Please insert your card number: ']
    print(card)

    card_number = list(str(card))
    print(card_number)  

         #1. on enlève le chiffre le plus à droite
    checking_digit = card_number.pop()
    print(checking_digit)  #pop() is a function in Python that removes and returns the last value from the list 
         #2. Reverse the order of the remaining digits.
    card_number.reverse() #same than pop(), here reversed() is an inbuilt function in Python that allows you to reverse the order
    print(card_number)    #3. For this sequence of reversed digits, take the digits at each of the even indices (0, 2, 4, 6, etc.) and double them. If any of the results are greater than 9, subtract 9 from those numbers.
    results = [] #ma liste que je vais remplir petit à petit avec la fonction append avec les nouvelles valeurs


    if accepted_results == values_dict['InvoiceID']:
      print("Invoice exists")
    else: 
      print("Invoice does not exist")

    for j, k in enumerate(card_number): 
      if j%2 == 0: 
        double_digit = int(k)*2
        if double_digit > 9: 
           double_digit = double_digit - 9
        results.append(double_digit)
      else: 
        results.append(int(k))

    z = sum(results)+int(checking_digit)
    print(z)
    if z%10 ==0: 
        print("Card number valid")

    else: 
      print("Card number invalid")


#@app.post("/pay_invoice")
#async def activate_Subscription(payload: Request):
    #values_dict = await payload.json()
    # Open the DB
    #database = sqlite3.connect('databaseproject.db', isolation_level=None)
    #query_accepted=database.execute('''SELECT Accepted FROM Quote
                                    #WHERE QuoteID = {}
                                    #'''.format(values_dict['QuoteID'])) 
    
    
    #accepted_results = query_accepted.fetchall()
    #print(accepted_results)
    
    #if accepted_results == '1' and values_dict['Password'] == 'Password'     :
         #query_pay=database.execute('''UPDATE Invoice 
                                        #SET Paid = 1
                                        #WHERE CustomerAccount = {customer}       
                                        #'''.format(customer = values_dict['CustomerAccount']))
         #activated_results = query_activated.fetchall()
         #print(activated_results)
         #print('subscription activated')
    #else: 
      #print('subscription can not be activated')    
    # Close the DB
    #database.close()
    #return True          


#------------------------------------
#if not paid send a pending incoice 
#------------------------------------




#---------------------------------------------------------
# else, delete pending 
#---------------------------------------------------------




if __name__ == '__main__':
  uvicorn.run(app, host='127.0.0.1', port=8000)
